{
  "rules": [
    {
      "type": "prd",
      "content": "# AI 코딩 최적화 PRD v3.0\n> Vercel AI SDK와 MCP를 활용한 차세대 AI 코딩 대시보드\n\n## 🎯 프로젝트 목표\n**사용자의 프로젝트 아이디어를 구조화된 TRD로 변환하고, Taskmaster MCP로 실행 가능한 작업으로 분해하는 AI 대시보드**\n\n---\n\n## 🔄 핵심 유저 플로우\n\n### 메인 플로우 다이어그램\n```\n[로그인 페이지]\n    ↓ (Google/GitHub OAuth)\n[대시보드 - 빈 상태]\n    ↓ (새 프로젝트 버튼 클릭)\n[Typeform 스타일 질문 시퀀스]\n    ├─ Step 1: 프로젝트 아이디어 (textarea)\n    ├─ Step 2: 핵심 기능들 (dynamic list)\n    ├─ Step 3: 유저 플로우 (guided input)\n    └─ Step 4: 기술 선호도 (optional chips)\n    ↓ (생성하기)\n[TRD 생성 중 - 스트리밍]\n    ├─ Brave Search로 최신 기술 검색\n    ├─ Vercel AI SDK로 TRD 작성\n    └─ 실시간 Markdown 렌더링\n    ↓ (완료)\n[TRD 뷰 + 작업 분리 버튼]\n    ↓ (세부 작업으로 나누기)\n[Taskmaster MCP 처리]\n    └─ 작업 카드 생성\n    ↓\n[완성된 대시보드]\n    ├─ 좌측: TRD 뷰어\n    └─ 우측: 작업 카드 그리드\n```\n\n### 상태별 UI 스펙\n\n#### 1. 빈 대시보드 상태\n```jsx\n// 중앙 정렬된 CTA\n<div className=\"flex items-center justify-center h-full\">\n  <Card className=\"max-w-md p-8 text-center\">\n    <Sparkles className=\"w-12 h-12 mx-auto mb-4 text-primary\" />\n    <h2 className=\"text-2xl font-bold mb-2\">첫 프로젝트를 만들어보세요</h2>\n    <p className=\"text-muted-foreground mb-6\">\n      아이디어를 입력하면 AI가 TRD와 작업 목록을 생성합니다\n    </p>\n    <Button size=\"lg\" className=\"rounded-2xl\">\n      <Plus className=\"mr-2\" /> 새 프로젝트 만들기\n    </Button>\n  </Card>\n</div>\n```\n\n#### 2. Typeform 질문 시퀀스\n```jsx\n// 풀스크린 모달 with 애니메이션\n<Dialog open={isOpen} onOpenChange={setIsOpen}>\n  <DialogContent className=\"max-w-2xl h-[80vh]\">\n    {/* Progress Bar */}\n    <div className=\"h-1 bg-secondary rounded-full overflow-hidden\">\n      <div \n        className=\"h-full bg-primary transition-all duration-300\"\n        style={{ width: `${(currentStep / totalSteps) * 100}%` }}\n      />\n    </div>\n    \n    {/* Step Content with Framer Motion */}\n    <AnimatePresence mode=\"wait\">\n      <motion.div\n        key={currentStep}\n        initial={{ opacity: 0, x: 20 }}\n        animate={{ opacity: 1, x: 0 }}\n        exit={{ opacity: 0, x: -20 }}\n      >\n        {renderCurrentStep()}\n      </motion.div>\n    </AnimatePresence>\n  </DialogContent>\n</Dialog>\n```\n\n#### 3. TRD 스트리밍 뷰\n```jsx\n// 실시간 Markdown 렌더링\n<div className=\"relative\">\n  {isStreaming && (\n    <div className=\"absolute top-4 right-4\">\n      <div className=\"flex items-center gap-2 bg-primary/10 px-3 py-1 rounded-full\">\n        <div className=\"w-2 h-2 bg-primary rounded-full animate-pulse\" />\n        <span className=\"text-sm\">AI가 작성 중...</span>\n      </div>\n    </div>\n  )}\n  \n  <ReactMarkdown\n    className=\"prose prose-invert max-w-none\"\n    components={{\n      code: ({ node, inline, className, children, ...props }) => {\n        const match = /language-(\\w+)/.exec(className || '');\n        return !inline && match ? (\n          <SyntaxHighlighter\n            style={vscDarkPlus}\n            language={match[1]}\n            PreTag=\"div\"\n            {...props}\n          >\n            {String(children).replace(/\\n$/, '')}\n          </SyntaxHighlighter>\n        ) : (\n          <code className={className} {...props}>\n            {children}\n          </code>\n        );\n      },\n    }}\n  >\n    {trdContent}\n  </ReactMarkdown>\n</div>\n```\n\n---\n\n## 📁 프로젝트 구조 (파일당 줄 수 제한 포함)\n\n```\nsrc/\n├── app/                          # Next.js 15 App Router\n│   ├── layout.tsx               # 루트 레이아웃 (max 80줄)\n│   ├── page.tsx                 # 홈 → /dashboard 리다이렉트 (max 15줄)\n│   ├── auth/\n│   │   └── page.tsx            # Supabase Auth UI (max 100줄)\n│   ├── dashboard/\n│   │   ├── layout.tsx          # 대시보드 레이아웃 (max 120줄)\n│   │   └── page.tsx            # 메인 대시보드 (max 150줄)\n│   └── api/\n│       ├── ai/\n│       │   └── route.ts        # Vercel AI SDK 엔드포인트 (max 100줄)\n│       └── search/\n│           └── route.ts        # Brave Search API (max 80줄)\n│\n├── components/\n│   ├── layout/\n│   │   ├── sidebar/\n│   │   │   ├── index.tsx       # 사이드바 컨테이너 (max 100줄)\n│   │   │   ├── project-list.tsx # 프로젝트 목록 (max 80줄)\n│   │   │   └── user-menu.tsx   # 유저 메뉴 (max 60줄)\n│   │   └── header/\n│   │       ├── index.tsx       # 헤더 컨테이너 (max 80줄)\n│   │       └── theme-toggle.tsx # 다크모드 토글 (max 40줄)\n│   │\n│   ├── project-form/           # Typeform 스타일 폼\n│   │   ├── index.tsx          # 폼 컨테이너 (max 120줄)\n│   │   ├── steps/\n│   │   │   ├── idea-step.tsx  # Step 1 (max 80줄)\n│   │   │   ├── features-step.tsx # Step 2 (max 100줄)\n│   │   │   ├── flow-step.tsx  # Step 3 (max 100줄)\n│   │   │   └── tech-step.tsx  # Step 4 (max 80줄)\n│   │   └── progress-bar.tsx   # 진행률 표시 (max 40줄)\n│   │\n│   ├── trd-viewer/\n│   │   ├── index.tsx          # TRD 뷰어 메인 (max 150줄)\n│   │   ├── markdown-renderer.tsx # Markdown 렌더러 (max 100줄)\n│   │   └── copy-button.tsx    # 복사 버튼 (max 60줄)\n│   │\n│   ├── task-cards/\n│   │   ├── index.tsx          # 작업 카드 그리드 (max 120줄)\n│   │   ├── task-card.tsx      # 개별 카드 (max 100줄)\n│   │   └── export-button.tsx  # 전체 내보내기 (max 80줄)\n│   │\n│   └── ui/                    # shadcn/ui 컴포넌트\n│\n├── hooks/\n│   ├── use-project.ts         # 프로젝트 상태 관리 (max 100줄)\n│   ├── use-ai-stream.ts       # AI 스트리밍 (max 80줄)\n│   └── use-mcp.ts            # MCP 통합 (max 80줄)\n│\n├── lib/\n│   ├── supabase/\n│   │   ├── client.ts         # 클라이언트 설정 (max 30줄)\n│   │   └── middleware.ts     # 미들웨어 (max 50줄)\n│   ├── ai/\n│   │   ├── prompts.ts        # 프롬프트 템플릿 (max 150줄)\n│   │   └── vercel-ai.ts      # Vercel AI 설정 (max 50줄)\n│   └── mcp/\n│       └── taskmaster.ts     # Taskmaster MCP (max 100줄)\n│\n└── types/\n    ├── project.ts            # 프로젝트 타입 (max 50줄)\n    ├── trd.ts               # TRD 타입 (max 40줄)\n    └── task.ts              # 작업 타입 (max 40줄)\n```\n\n---\n\n## 🛠 기술 스택 상세\n\n### 핵심 의존성\n```json\n{\n  \"dependencies\": {\n    // Framework\n    \"next\": \"15.0.2\",\n    \"react\": \"19.0.0\",\n    \"react-dom\": \"19.0.0\",\n    \n    // AI & Streaming\n    \"ai\": \"^3.4.0\",              // Vercel AI SDK\n    \"openai\": \"^4.72.0\",         // OpenAI 클라이언트\n    \n    // Database & Auth\n    \"@supabase/supabase-js\": \"^2.46.0\",\n    \"@supabase/ssr\": \"^0.5.1\",\n    \n    // UI Components\n    \"@radix-ui/react-dialog\": \"^1.1.2\",\n    \"@radix-ui/react-dropdown-menu\": \"^2.1.2\",\n    \"@radix-ui/react-tabs\": \"^1.1.1\",\n    \"lucide-react\": \"^0.454.0\",\n    \"framer-motion\": \"^11.11.0\",\n    \n    // Forms & Validation\n    \"react-hook-form\": \"^7.54.0\",\n    \"@hookform/resolvers\": \"^3.9.0\",\n    \"zod\": \"^3.23.8\",\n    \n    // Markdown\n    \"react-markdown\": \"^9.0.1\",\n    \"remark-gfm\": \"^4.0.0\",\n    \"rehype-highlight\": \"^7.0.0\",\n    \n    // Utilities\n    \"clsx\": \"^2.1.1\",\n    \"tailwind-merge\": \"^2.5.0\",\n    \"date-fns\": \"^4.1.0\"\n  }\n}\n```\n\n### 환경 변수 구조\n```env\n# Supabase\nNEXT_PUBLIC_SUPABASE_URL=https://[PROJECT_ID].supabase.co\nNEXT_PUBLIC_SUPABASE_ANON_KEY=eyJ...\n\n# AI Services  \nOPENAI_API_KEY=sk-...\nBRAVE_SEARCH_API_KEY=BSA...\n\n# Vercel AI SDK\nAI_PROVIDER=openai\nAI_MODEL=gpt-4o\n```\n\n---\n\n## 💡 핵심 구현 패턴\n\n### 1. Vercel AI SDK 스트리밍 구현\n```typescript\n// app/api/ai/route.ts\nimport { openai } from '@ai-sdk/openai';\nimport { streamText } from 'ai';\n\nexport async function POST(req: Request) {\n  const { prompt, context } = await req.json();\n  \n  // Brave Search 결과를 context에 포함\n  const searchResults = await searchLatestTech(context.techStack);\n  \n  const result = streamText({\n    model: openai('gpt-4o'),\n    messages: [\n      {\n        role: 'system',\n        content: 'You are an expert technical architect...'\n      },\n      {\n        role: 'user',\n        content: `${prompt}\\n\\nLatest tech info:\\n${searchResults}`\n      }\n    ],\n    temperature: 0.7,\n  });\n  \n  return result.toDataStreamResponse();\n}\n```\n\n### 2. MCP Taskmaster 통합\n```typescript\n// lib/mcp/taskmaster.ts\nimport { MCPClient } from '@modelcontextprotocol/sdk';\n\nexport async function breakdownToTasks(trd: string) {\n  const mcp = new MCPClient({\n    serverName: 'taskmaster',\n    transport: 'stdio'\n  });\n  \n  await mcp.connect();\n  \n  const result = await mcp.callTool('request_planning', {\n    originalRequest: trd,\n    tasks: await generateInitialTasks(trd)\n  });\n  \n  return result.tasks;\n}\n```\n\n### 3. 실시간 스트리밍 훅\n```typescript\n// hooks/use-ai-stream.ts\nimport { useCompletion } from 'ai/react';\n\nexport function useAIStream() {\n  const { completion, isLoading, complete } = useCompletion({\n    api: '/api/ai',\n    onFinish: (prompt, completion) => {\n      // TRD 생성 완료 후 자동 저장\n      saveToSupabase(completion);\n    }\n  });\n  \n  return { \n    content: completion,\n    isStreaming: isLoading,\n    generate: complete\n  };\n}\n```\n\n---\n\n## 🎨 UI 컴포넌트 상세 스펙\n\n### 1. 사이드바 네비게이션\n```jsx\n// 반응형 드로어 + 데스크톱 고정\n<aside className={cn(\n  \"fixed inset-y-0 z-50 flex h-full w-72 flex-col\",\n  \"bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\",\n  \"border-r transition-transform duration-300\",\n  // 모바일: 드로어 방식\n  \"lg:relative lg:translate-x-0\",\n  isOpen ? \"translate-x-0\" : \"-translate-x-full\"\n)}>\n  <SidebarHeader />\n  <ProjectList projects={projects} />\n  <SidebarFooter>\n    <UserMenu />\n  </SidebarFooter>\n</aside>\n```\n\n### 2. 작업 카드 드래그 앤 드롭\n```jsx\n// Framer Motion으로 순서 변경\n<Reorder.Group values={tasks} onReorder={setTasks}>\n  {tasks.map((task) => (\n    <Reorder.Item\n      key={task.id}\n      value={task}\n      className=\"group\"\n      whileHover={{ scale: 1.02 }}\n      whileTap={{ scale: 0.98 }}\n    >\n      <TaskCard task={task} />\n    </Reorder.Item>\n  ))}\n</Reorder.Group>\n```\n\n### 3. 복사 버튼 피드백\n```jsx\n// 복사 성공 시 애니메이션\n<Button\n  onClick={handleCopy}\n  variant=\"ghost\"\n  size=\"sm\"\n  className=\"gap-2\"\n>\n  <AnimatePresence mode=\"wait\">\n    {isCopied ? (\n      <motion.div\n        initial={{ scale: 0 }}\n        animate={{ scale: 1 }}\n        exit={{ scale: 0 }}\n      >\n        <Check className=\"h-4 w-4 text-green-500\" />\n      </motion.div>\n    ) : (\n      <Copy className=\"h-4 w-4\" />\n    )}\n  </AnimatePresence>\n  {isCopied ? \"복사됨!\" : \"복사\"}\n</Button>\n```\n\n---\n\n## 🔐 Supabase 스키마\n\n### 테이블 구조\n```sql\n-- 프로젝트 테이블\nCREATE TABLE projects (\n  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,\n  name TEXT NOT NULL,\n  idea TEXT NOT NULL,\n  features JSONB,\n  user_flow TEXT,\n  tech_preferences TEXT[],\n  trd_content TEXT,\n  status TEXT DEFAULT 'draft',\n  created_at TIMESTAMPTZ DEFAULT NOW(),\n  updated_at TIMESTAMPTZ DEFAULT NOW()\n);\n\n-- 작업 테이블  \nCREATE TABLE tasks (\n  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n  project_id UUID REFERENCES projects(id) ON DELETE CASCADE,\n  title TEXT NOT NULL,\n  description TEXT,\n  priority TEXT CHECK (priority IN ('high', 'medium', 'low')),\n  estimated_time TEXT,\n  dependencies UUID[],\n  order_index INTEGER,\n  created_at TIMESTAMPTZ DEFAULT NOW()\n);\n\n-- RLS 정책\nALTER TABLE projects ENABLE ROW LEVEL SECURITY;\nALTER TABLE tasks ENABLE ROW LEVEL SECURITY;\n\nCREATE POLICY \"Users can view own projects\" ON projects\n  FOR SELECT USING (auth.uid() = user_id);\n  \nCREATE POLICY \"Users can create own projects\" ON projects\n  FOR INSERT WITH CHECK (auth.uid() = user_id);\n```\n\n---\n\n## 📋 프롬프트 엔지니어링\n\n### TRD 생성 프롬프트\n```typescript\nconst TRD_SYSTEM_PROMPT = `\nYou are an expert technical architect specializing in modern web development.\nYour task is to create a comprehensive Technical Requirements Document (TRD).\n\nGuidelines:\n1. Use the latest stable versions of technologies\n2. Prioritize developer experience and maintainability\n3. Include specific implementation details\n4. Structure the document with clear sections\n5. Provide code examples where relevant\n\nOutput Format:\n- Use Markdown with proper headings\n- Include code blocks with syntax highlighting\n- Add tables for API endpoints and data models\n- Keep sections concise but complete\n`;\n\nconst generateTRDPrompt = (data: ProjectFormData) => `\nProject Idea: ${data.idea}\n\nCore Features:\n${data.features.map((f, i) => `${i + 1}. ${f}`).join('\\n')}\n\nUser Flow:\n${data.userFlow}\n\nTech Preferences: ${data.techPreferences?.join(', ') || 'No specific preferences'}\n\nBased on the above information and the latest tech trends from Brave Search,\ncreate a comprehensive TRD that includes:\n\n1. Executive Summary\n2. Technical Architecture\n3. Component Structure  \n4. API Design\n5. Database Schema\n6. Security Considerations\n7. Performance Optimization\n8. Deployment Strategy\n`;\n```\n\n### 작업 분해 프롬프트\n```typescript\nconst TASK_BREAKDOWN_PROMPT = `\nBreak down the following TRD into actionable development tasks.\n\nEach task should:\n- Be completable in 2-4 hours\n- Have clear acceptance criteria\n- Include any dependencies on other tasks\n- Be assigned a priority (high/medium/low)\n- Include estimated time\n\nFormat each task as:\n{\n  \"title\": \"Task title\",\n  \"description\": \"Detailed description\",\n  \"priority\": \"high|medium|low\",\n  \"estimatedTime\": \"2-4 hours\",\n  \"dependencies\": [\"task-id-1\", \"task-id-2\"],\n  \"acceptanceCriteria\": [\n    \"Criterion 1\",\n    \"Criterion 2\"\n  ]\n}\n`;\n```\n\n---\n\n## 🚀 구현 체크리스트\n\n### Phase 1: 기초 설정 (3시간)\n- [ ] Next.js 15 프로젝트 생성\n- [ ] Supabase 프로젝트 설정 및 스키마 생성\n- [ ] shadcn/ui 설치 (`npx shadcn@latest init`)\n- [ ] 다크모드 테마 설정\n- [ ] 환경 변수 구성\n\n### Phase 2: 인증 & 레이아웃 (4시간)\n- [ ] Supabase Auth 통합\n- [ ] 사이드바 구현 (모바일 반응형)\n- [ ] 헤더 & 테마 토글\n- [ ] 프로젝트 목록 컴포넌트\n\n### Phase 3: 핵심 기능 구현 (6시간)\n- [ ] Typeform 스타일 프로젝트 생성 폼\n- [ ] Vercel AI SDK 통합\n- [ ] TRD 스트리밍 뷰어\n- [ ] Markdown 렌더러 & 코드 하이라이팅\n- [ ] 복사 기능 구현\n\n### Phase 4: MCP & 작업 관리 (5시간)\n- [ ] Taskmaster MCP 연동\n- [ ] 작업 카드 UI\n- [ ] 드래그 앤 드롭\n- [ ] 전체 내보내기 기능\n- [ ] Brave Search API 통합\n\n### Phase 5: 마무리 (2시간)\n- [ ] 에러 처리 & 로딩 상태\n- [ ] 성능 최적화\n- [ ] 배포 준비\n- [ ] 테스트 & 디버깅\n\n---\n\n## 🔍 핵심 차별화 요소\n\n1. **실시간 AI 스트리밍**: Vercel AI SDK로 TRD가 실시간으로 생성되는 것을 시각적으로 확인\n2. **Taskmaster MCP 통합**: 단순 텍스트가 아닌 구조화된 작업 단위로 자동 분해\n3. **최신 기술 반영**: Brave Search로 실시간 기술 트렌드 검색 후 TRD에 반영\n4. **Typeform UX**: 단계별 가이드로 사용자 부담 최소화\n5. **원클릭 복사**: TRD와 작업 목록을 즉시 다른 AI 도구에서 활용 가능\n\n이 PRD는 AI가 코드를 생성할 때 필요한 모든 구현 디테일을 포함하면서도, \n불필요한 마이크로매니징을 피하고 개발자의 창의성을 존중하는 균형을 맞췄습니다.\n",
      "writedAt": "2025-07-20T07:19:19.082Z"
    },
    {
      "type": "architecture",
      "content": "# Technical Requirements Document (TRD)\n\n## 1. Executive Technical Summary\n\n### 프로젝트 개요\nAI 기반 프로젝트 아이디어 입력을 통해 구조화된 Technical Requirements Document(TRD)를 생성하고, 이를 Taskmaster MCP로 자동 분해하여 실행 가능한 작업 카드로 제공하는 웹 대시보드입니다. Next.js 15 App Router를 사용한 모던 React 프레임워크 위에서 Vercel AI SDK·Brave Search·Supabase·MCP를 유기적으로 연동합니다.\n\n### 핵심 기술 스택\n- 프레임워크: Next.js 15 (App Router) + React 19 + TypeScript  \n- UI: Tailwind CSS + shadcn/ui(Radix UI) + Framer Motion  \n- AI: Vercel AI SDK(`ai` 패키지) + OpenAI 클라이언트  \n- 검색: Brave Search API  \n- 데이터베이스·인증: Supabase (PostgreSQL, RLS)  \n- 작업 분해: Taskmaster MCP (`@modelcontextprotocol/sdk`)  \n- 폼·유효성: React Hook Form + Zod  \n- 마크다운: react-markdown + remark-gfm + rehype-highlight\n\n### 주요 기술 목표\n- 응답 지연시간: API 평균 ≤200ms  \n- 실시간 스트리밍: TRD 생성 중 실시간 Markdown 렌더링  \n- 가용성: 99.9% 이상  \n- 확장성: 수백 개 동시 대시보드 세션 대응\n\n### 주요 가정\n- 초기 사용자 수는 수백 명 수준  \n- OpenAI·Brave Search·MCP 서비스 SLA 준수  \n- Supabase 무료 플랜 또는 저비용으로 시작 가능  \n- TypeScript 기반 코드베이스로 팀 생산성 유지\n\n---\n\n## 2. Tech Stack\n\n| Category             | Technology / Library                       | Reasoning (선택 이유)                                    |\n| -------------------- | ------------------------------------------ | -------------------------------------------------------- |\n| Language             | TypeScript                                 | 정적 타입 검사로 안정성·가독성 확보                       |\n| Framework            | Next.js 15 (App Router) + React 19         | 모던 SSR/SSG 지원, 파일 기반 라우팅, React 동적 기능       |\n| UI Toolkit           | Tailwind CSS + shadcn/ui (Radix UI)        | 빠른 스타일링, 접근성 높은 컴포넌트 제공                 |\n| Motion & Animation   | Framer Motion                              | UX 개선용 간편 애니메이션                                 |\n| AI SDK               | `ai` (Vercel AI SDK)                       | 스트리밍 지원, Vercel 최적화                              |\n| OpenAI Client        | `openai`                                   | GPT-4 모델 활용                                          |\n| Search API           | Brave Search API                           | 최신 기술 트렌드 실시간 검색                              |\n| Database & Auth      | Supabase (`@supabase/supabase-js`, RLS)     | 빠른 개발, 내장 인증·데이터베이스                         |\n| Task Orchestration   | `@modelcontextprotocol/sdk` (MCP)          | Taskmaster 기반 작업 분해                                 |\n| Forms & Validation   | React Hook Form + Zod                      | 선언적 폼 관리·스키마 기반 유효성 검사                    |\n| Markdown Rendering   | react-markdown + remark-gfm + rehype-highlight | 실시간 Markdown 파싱·하이라이팅                           |\n| Utilities            | clsx, tailwind-merge, date-fns             | 클래스명 결합·유틸리티 함수                                |\n\n---\n\n## 3. System Architecture Design\n\n### Top-Level Building Blocks\n- Frontend (Next.js App Router)  \n  - 인증(Auth): Supabase Auth UI  \n  - 대시보드: TRD 뷰어 & 작업 카드 그리드  \n  - 폼: Typeform 스타일 질문 시퀀스  \n- Backend API (Next.js API Routes)  \n  - `/api/ai`: Vercel AI SDK 스트리밍 엔드포인트  \n  - `/api/search`: Brave Search 연동  \n- Database (Supabase PostgreSQL)  \n  - 프로젝트·작업 테이블, RLS 정책  \n- Taskmaster MCP 서비스  \n  - TRD → 작업 단위 분해 처리  \n- 외부 서비스  \n  - OpenAI, Brave Search, MCP\n\n### Top-Level Component Interaction Diagram\n```mermaid\ngraph TD\n    A[Frontend(UI)] --> B[API Layer]\n    B --> C[Supabase DB]\n    B --> D[Vercel AI SDK]\n    B --> E[Brave Search]\n    B --> F[Taskmaster MCP]\n    C --> B\n    D --> B\n    F --> B\n```\n- Frontend는 API Layer를 통해 AI 생성·검색·DB·MCP와 통신  \n- API Layer는 각각 Vercel AI SDK, Brave Search, Taskmaster MCP 호출  \n- Supabase DB는 프로젝트·작업 데이터를 저장·조회  \n\n### Code Organization & Convention\n\n**Domain-Driven 조직 전략**\n- Domain Separation: `project`, `trd`, `task` 도메인 구분  \n- Layer-Based Architecture: `app` (presentation), `lib` (infrastructure), `hooks` (logic), `components` (UI), `types`  \n- Feature-Based Modules: 각 주요 기능별 폴더(`project-form`, `trd-viewer`, `task-cards`)  \n- Shared Components: `ui` 모듈에 공통 컴포넌트·유틸리티  \n\n**파일·폴더 구조**\n```\nsrc/\n├── app/\n│   ├── layout.tsx\n│   ├── page.tsx\n│   ├── auth/\n│   │   └── page.tsx\n│   ├── dashboard/\n│   │   ├── layout.tsx\n│   │   └── page.tsx\n│   └── api/\n│       ├── ai/\n│       │   └── route.ts\n│       └── search/\n│           └── route.ts\n├── components/\n│   ├── layout/\n│   ├── project-form/\n│   ├── trd-viewer/\n│   ├── task-cards/\n│   └── ui/\n├── hooks/\n│   ├── use-project.ts\n│   ├── use-ai-stream.ts\n│   └── use-mcp.ts\n├── lib/\n│   ├── supabase/\n│   ├── ai/\n│   └── mcp/\n└── types/\n    ├── project.ts\n    ├── trd.ts\n    └── task.ts\n```\n\n### Data Flow & Communication Patterns\n- Client-Server Communication: Next.js API Route JSON request/response, 스트리밍 `ReadableStream`  \n- Database Interaction: Supabase JS 클라이언트, RLS 활성화, 단일 연결 풀 관리  \n- External Service Integration: Brave Search·OpenAI·MCP 클라이언트 모듈 추상화  \n- Real-time Communication: Vercel AI SDK 스트리밍 사용, React Markdown 실시간 렌더링  \n- Data Synchronization: UI 상태 훅(`use-project`)을 통한 중앙 관리, optimistic update 고려\n\n---\n\n## 4. Performance & Optimization Strategy\n- AI 스트리밍 응답 초기 바이트 수신 최적화(keep-alive)  \n- Next.js ISR/SSG 불필요 페이지 제외, 순수 CSR 구성  \n- DB 인덱싱: `projects.user_id`, `tasks.project_id`  \n- 클라이언트 측 캐싱: SWR 혹은 React Query 사용 고려  \n\n---\n\n## 5. Implementation Roadmap & Milestones\n\n### Phase 1: Foundation (MVP 구현)  \n- Core Infrastructure: Next.js 15 프로젝트 설정, Supabase 스키마 생성  \n- Essential Features: 인증·빈 대시보드·Typeform 폼·TRD 스트리밍 뷰어  \n- Basic Security: RLS 정책, 환경 변수 관리  \n- Development Setup: GitHub Actions CI, Prettier/ESLint  \n- Timeline: 1주\n\n### Phase 2: Feature Enhancement  \n- Advanced Features: 작업 분해 버튼·Taskmaster MCP 연동  \n- Performance Optimization: AI 스트리밍 튜닝, DB 인덱싱  \n- Enhanced Security: 토큰 비밀 관리 강화, XSS/CSRF 방어  \n- Monitoring Implementation: Vercel Analytics, Sentry  \n- Timeline: 2주\n\n### Phase 3: Scaling & Optimization  \n- Scalability Implementation: Auto-scaling(서버리스), 캐시 레이어 도입  \n- Advanced Integrations: 소셜 로그인 추가, Webhook 지원  \n- Enterprise Features: 다중 사용자 권한 관리, 조직 단위 프로젝트  \n- Compliance & Auditing: GDPR, SOC2 기본 준수  \n- Timeline: 3주\n\n---\n\n## 6. Risk Assessment & Mitigation Strategies\n\n### Technical Risk Analysis\n- Technology Risks: AI 서비스 API 변경 → 버전 고정·테스트 커버리지 강화  \n- Performance Risks: 스트리밍 지연 → CDN, keep-alive 설정  \n- Security Risks: RLS 누락·인증 우회 → 자동화된 정책 검증, 펜테스트  \n- Integration Risks: Brave Search·MCP 장애 → 재시도 로직, 폴백 모드  \n\n**Mitigation Strategies**  \n- 검증된 SDK 사용, 시뮬레이션 테스트  \n- Circuit Breaker 패턴 도입 및 백오프 재시도  \n- 민감 데이터 암호화 및 환경 변수 분리\n\n### Project Delivery Risks\n- Timeline Risks: 의존성 지연 → 스코프 조정 및 데일리 스탠드업  \n- Resource Risks: 인력 부족 → 크로스 트레이닝, 외부 컨설팅 활용  \n- Quality Risks: 테스트 부족 → 유닛·통합 테스트 우선 도입  \n- Deployment Risks: 설정 오류 → IaC(GitOps), 스테이징 검증  \n\n**Contingency Plans**  \n- MVP 범위 유지, 페이즈별 우선순위 재조정  \n- 롤백 가능한 배포 파이프라인 설계  \n- 외부 서비스 장애 시 대체 워크플로우 문서화",
      "writedAt": "2025-07-20T07:19:19.083Z"
    },
    {
      "type": "guideline",
      "content": "# Code Guidelines for Next.js AI Coding Dashboard\n\n## 1. Project Overview  \nThis project delivers a modern AI‐powered dashboard that:  \n- Uses Next.js 15 App Router and React 19 with TypeScript for a file‐based, server‐first architecture.  \n- Streams TRD generation via Vercel AI SDK and Brave Search.  \n- Renders real‐time Markdown with syntax highlighting.  \n- Decomposes TRD into actionable tasks via Taskmaster MCP.  \n- Persists data in Supabase with RLS, React Hook Form/Zod for validation, and Tailwind CSS/shadcn/ui for styling.\n\n## 2. Core Principles  \n1. **Single Responsibility**: Each module or component MUST have one clear purpose.  \n2. **Strong Typing**: All public interfaces, props, API payloads, and DB models MUST use explicit TypeScript types or Zod schemas.  \n3. **Domain Organization**: Files and folders MUST follow domain/feature boundaries (`project-form/`, `trd-viewer/`, `task-cards/`).  \n4. **Streaming-First**: AI endpoints MUST support streaming `ReadableStream` and client hooks to display incremental updates.  \n5. **Secure by Default**: All database calls MUST use Supabase RLS policies; API routes MUST validate inputs with Zod.\n\n## 3. Language‐Specific Guidelines  \n\n### 3.1 TypeScript & Next.js  \n- **File Layout**:  \n  - `/src/app/...` for pages/routes (max lines per file as per TRD).  \n  - `/src/components/<feature>/` for UI.  \n  - `/src/lib/` for API clients and infrastructure.  \n  - `/src/hooks/` for custom hooks.  \n  - `/src/types/` for reusable type definitions.  \n- **Imports**:  \n  - Use absolute imports via `tsconfig.json` paths:  \n    ```ts\n    import { useAIStream } from '@/hooks/use-ai-stream'\n    ```  \n- **Error Handling**:  \n  - In API routes, wrap logic in `try/catch` and return `NextResponse.json({ error: message }, { status: code })`.  \n  - Use Next.js error boundaries (`error.tsx`) for route-level errors.\n\n### 3.2 React & Hooks  \n- **State**: Prefer local state for UI; use `use-project` for shared project context.  \n- **Effects**: Clean up subscriptions/streams in `useEffect` return to avoid memory leaks.  \n- **Forms**: Define Zod schema, then:  \n  ```ts\n  const schema = z.object({ idea: z.string().min(1) });\n  const { register, handleSubmit } = useForm({ resolver: zodResolver(schema) });\n  ```  \n\n### 3.3 Tailwind CSS & shadcn/ui  \n- Use `tailwind-merge` when conditionally combining classes:  \n  ```ts\n  cn('px-4', condition && 'bg-primary')\n  ```  \n- No inline styles or CSS modules. All design tokens via Tailwind or shadcn/ui props.\n\n### 3.4 Supabase & SQL  \n- Always use parameterized queries via Supabase client.  \n- Adhere to RLS policies; never bypass with `service_role` in client code.  \n- Keep schema migrations in a versioned SQL folder.\n\n## 4. Code Style Rules  \n\n### 4.1 MUST Follow  \n- **ESLint & Prettier**: Enforce lint rules and auto-format on save.  \n- **Explicit Returns**: Always type function return values.  \n- **Zod Validation**: Validate all external inputs.  \n- **Streaming API Pattern**:   \n  ```ts\n  // api/ai/route.ts\n  export async function POST(req: Request) {\n    const { prompt } = await req.json();\n    const stream = streamText({ model: ..., messages: [...] });\n    return stream.toDataStreamResponse();\n  }\n  ```  \n- **Component Length**: Keep JSX files under the max line counts specified in TRD.  \n\n### 4.2 MUST NOT Do  \n- **No `any`**: Avoid `any` or implicit `any`.  \n- **No Monoliths**: Do not create files >150 lines or mix UI/API in one module.  \n- **No Inline Fetch**: All external calls MUST go through `/src/lib/*`.  \n- **No CSS-in-JS**: Do not introduce styled-components or emotion.  \n- **No Mixed Concerns**: Do not handle business logic inside UI-only components.\n\n## 5. Architecture Patterns  \n\n### 5.1 Component/Module Structure  \n- **Presentation vs. Container**:  \n  - Presentation components in `components/ui` accept props only.  \n  - Container components in `components/<feature>` handle hooks and data.  \n- **Domain Modules**: Group by feature:  \n  ```\n  components/\n  ├ project-form/\n  ├ trd-viewer/\n  └ task-cards/\n  ```\n\n### 5.2 Data Flow  \n- **Client → API**: Fetch via Next.js `app/api/*` endpoints, returning JSON or streaming.  \n- **State Hooks**:  \n  - `use-project` for project metadata.  \n  - `use-ai-stream` for TRD streaming.  \n  - `use-mcp` for task breakdown.  \n- **Optimistic Updates**: Use callbacks in hooks to update Supabase immediately on success.\n\n### 5.3 API Design  \n- **Endpoints**:  \n  - POST `/api/ai` for TRD streaming.  \n  - POST `/api/search` for Brave Search.  \n- **Payloads**: Typed interfaces in `types/`:  \n  ```ts\n  export interface AIRequest { prompt: string; context: string; }\n  export interface Task { title: string; description: string; ... }\n  ```\n\n## 6. Example Code Snippets  \n\n```typescript\n// MUST: Absolute import and single responsibility\nimport { breakdownToTasks } from '@/lib/mcp/taskmaster';\n\nexport async function getTasks(trd: string) {\n  return breakdownToTasks(trd);  // clear delegate to lib\n}\n```\n\n```typescript\n// MUST NOT: Implicit any, mixed logic and UI\nexport function TRDPage(props) {\n  fetch('/api/ai', { method: 'POST', body: JSON.stringify({prompt: props.prompt}) })\n    .then(res => res.json())\n    .then(data => console.log(data))\n    .catch(err => console.error(err));\n  return <div>{/* UI + fetch in same file */}</div>;\n}\n```\n\n```jsx\n// MUST: Zod + React Hook Form\nimport { z } from 'zod';\nimport { useForm } from 'react-hook-form';\nconst schema = z.object({ idea: z.string().min(1) });\nfunction IdeaStep() {\n  const { register, handleSubmit } = useForm({ resolver: zodResolver(schema) });\n  return <form onSubmit={handleSubmit(onSubmit)}><textarea {...register('idea')} /></form>;\n}\n```\n\n```jsx\n// MUST NOT: Large component, no schema\nfunction BigForm() {\n  // 300 lines mixing UI, fetch, validation, state\n}\n```\n\n```ts\n// MUST: Next.js error handler in route\nexport async function POST(req: Request) {\n  try {\n    const { prompt } = await req.json();\n    // ...\n  } catch (e) {\n    return NextResponse.json({ error: (e as Error).message }, { status: 500 });\n  }\n}\n```\n\n```ts\n// MUST NOT: Swallow errors\nexport async function POST(req: Request) {\n  const { prompt } = await req.json();\n  streamText({ /* missing try/catch */ });\n}\n```\n\n---\n\n_End of Guidelines_",
      "writedAt": "2025-07-20T07:19:19.083Z"
    }
  ]
}