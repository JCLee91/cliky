'use client'

import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog'
import { Button } from '@/components/ui/button'
import { FolderOpen, FileText, Terminal, CheckCircle2, Copy } from 'lucide-react'
import { useState } from 'react'
import { useToast } from '@/hooks/use-toast'

interface HowToUseModalProps {
  open: boolean
  onOpenChange: (open: boolean) => void
}

export function HowToUseModal({ open, onOpenChange }: HowToUseModalProps) {
  const [copiedPrompt, setCopiedPrompt] = useState(false)
  const { toast } = useToast()
  
  const promptText = `## Instruction 
1. Read both the PRD and the Tasks file in the \`root/Cliky-DOC\` folder of this project to familiarize yourself with the project you'll be developing. 
2. Work through the tasks in the order listed in the Tasks documentation. 
3. Update your progress in the Tasks file as you complete each task. 
4. Anything I have to do myself (ex setting environment variables), write it all out in a MD file in the \`root/SET-GUIDE\` folder at the end of the task.

**IMPORTANT RULE: Read the PRD file evertime before starting next task as context.**

When you've read the documentation and understand the project and these instructions, say 'I&apos;m ready to make something cool'.`
  
  const handleCopyPrompt = () => {
    navigator.clipboard.writeText(promptText)
    setCopiedPrompt(true)
    toast({
      title: "Prompt copied!",
      description: "Paste it into your AI development tool.",
    })
    setTimeout(() => setCopiedPrompt(false), 2000)
  }

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-2xl">
        <DialogHeader>
          <DialogTitle className="text-2xl font-bold">How to Use Cliky</DialogTitle>
          <DialogDescription>
            Learn how to use PRDs and task lists generated by Cliky with AI development tools
          </DialogDescription>
        </DialogHeader>
        
        <div className="space-y-6 mt-4">
          {/* Step 1 */}
          <div className="flex gap-4">
            <div className="flex-shrink-0 w-10 h-10 rounded-full bg-primary/10 flex items-center justify-center">
              <span className="text-sm font-semibold text-primary">1</span>
            </div>
            <div className="flex-1 space-y-2">
              <h3 className="font-semibold flex items-center gap-2">
                <FileText className="w-4 h-4" />
                Generate PRD and Task List
              </h3>
              <p className="text-sm text-muted-foreground">
                First, use Cliky to input your project idea and generate a detailed PRD and task list.
              </p>
            </div>
          </div>

          {/* Step 2 */}
          <div className="flex gap-4">
            <div className="flex-shrink-0 w-10 h-10 rounded-full bg-primary/10 flex items-center justify-center">
              <span className="text-sm font-semibold text-primary">2</span>
            </div>
            <div className="flex-1 space-y-2">
              <h3 className="font-semibold flex items-center gap-2">
                <FolderOpen className="w-4 h-4" />
                Set Up Project Structure
              </h3>
              <p className="text-sm text-muted-foreground">
                Create a <code className="px-1.5 py-0.5 bg-muted rounded text-xs font-mono">DOC</code> folder in your project directory 
                and place the downloaded PRD and task list files inside.
              </p>
              <div className="bg-muted/50 p-3 rounded-md">
                <pre className="text-xs font-mono">
{`📁 your-project/
  └── 📁 Cliky-DOC/
      ├── 📄 PRD.md
      └── 📄 tasks.json (or tasks.md)`}
                </pre>
              </div>
            </div>
          </div>

          {/* Step 3 */}
          <div className="flex gap-4">
            <div className="flex-shrink-0 w-10 h-10 rounded-full bg-primary/10 flex items-center justify-center">
              <span className="text-sm font-semibold text-primary">3</span>
            </div>
            <div className="flex-1 space-y-2">
              <h3 className="font-semibold flex items-center gap-2">
                <Terminal className="w-4 h-4" />
                Input Prompt to AI Tool
              </h3>
              <p className="text-sm text-muted-foreground">
                In Claude, Cursor, or any other AI development tool, input the following prompt:
              </p>
              <div className="bg-muted/50 p-4 rounded-md relative">
                <pre className="text-xs font-mono whitespace-pre-wrap pr-16 max-h-24 overflow-y-auto">
{promptText}
                </pre>
                <Button
                  size="sm"
                  variant="ghost"
                  onClick={handleCopyPrompt}
                  className="absolute top-3 right-10"
                >
                  {copiedPrompt ? (
                    <CheckCircle2 className="w-4 h-4 text-green-600" />
                  ) : (
                    <Copy className="w-4 h-4" />
                  )}
                </Button>
              </div>
            </div>
          </div>

          {/* Step 4 */}
          <div className="flex gap-4">
            <div className="flex-shrink-0 w-10 h-10 rounded-full bg-primary/10 flex items-center justify-center">
              <span className="text-sm font-semibold text-primary">4</span>
            </div>
            <div className="flex-1 space-y-2">
              <h3 className="font-semibold flex items-center gap-2">
                <CheckCircle2 className="w-4 h-4" />
                Start Development
              </h3>
              <p className="text-sm text-muted-foreground">
                Once the AI understands the PRD and task list, it will be ready to develop. 
                You can proceed with development sequentially according to the task list. 
                The AI will generate code based on each task's details, implementation methods, and test strategies.
              </p>
            </div>
          </div>
        </div>

        <div className="flex justify-end mt-6">
          <Button onClick={() => onOpenChange(false)}>
            Got it
          </Button>
        </div>
      </DialogContent>
    </Dialog>
  )
}